#+TITLE: lfs:commands.org
#+AUTHOR: idsyr
#+STARTUP: showeverything
#+OPTIONS: toc:2


* Preparing the Host System
** Creating a New Partition 
#+begin_src bash
fdisk /dev/sdb
    g w
    n t w
# EFI system partition 200M
# Linux swap           4G
# Linux x86-64 root    30G
#+end_src



** Creating a File System on the Partition 
#+begin_src bash
mkfs.fat -F32 /dev/sdb1
mkswap /dev/sdb2
mkfs -v -t ext4 /dev/sdb3
lsblk -f
#+end_src



** Setting The $LFS Variable
#+begin_src bash
echo "export LFS=/mnt/lfs" >> ~/.bashrc
bash
#+end_src



** Mounting the New Partition
#+begin_src bash
mkdir -pv $LFS
mount -v -t ext4 /dev/sdb3 $LFS
#+end_src



* Packages and Patches
#+INCLUDE: "load_sources.sh" src shell


* Final Preparations
** Creating a Limited Directory Layout in the LFS Filesystem
#+INCLUDE: "create_directory_layout.sh" src shell
** Adding the LFS User
- after this point files in default user is unaccessible
#+INCLUDE: "add_lfs_user.sh" src shell
** Setting Up the Environment
- while logged as _lfs_
#+INCLUDE: "setting_up_environment.sh" src shell


* Compiling a Cross-Toolchain
** Binutils
- linker, assembler, other tools for handling object files
#+INCLUDE: "install_cross_binutils.sh" src shell
** GCC
#+INCLUDE: "install_cross_gcc.sh" src shell
** Linux API Headers
#+INCLUDE: "install_cross_linux_headers.sh" src shell
** Glibc
#+INCLUDE: "install_cross_glibc.sh" src shell
** libstd++
#+INCLUDE: "install_cross_libstd++.sh" src shell
<+++++++++++++++++++++++++++++___APPROVED___++++++++

* Cross Compiling Temporary Tools
** M4
#+setupfile: "install_temptool_m4.sh" src shell
** Ncurses
#+INCLUDE: "install_temptool_ncurses.sh" src shell
** Bash
#+INCLUDE: "install_temptool_bash.sh" src shell
** Coreutils
#+INCLUDE: "install_temptool_coreutils.sh" src shell
** Diffutils
#+INCLUDE: "install_temptool_diffutils.sh" src shell
** file
#+INCLUDE: "install_temptool_file.sh" src shell
** findutils
#+INCLUDE: "install_temptool_findutils.sh" src shell
** gawk
#+INCLUDE: "install_temptool_gawk.sh" src shell 
** grep
#+INCLUDE: "install_temptool_grep.sh" src shell 
** gzip
#+INCLUDE: "install_temptool_gzip.sh" src shell 
** make
#+INCLUDE: "install_temptool_make.sh" src shell 
** patch
#+INCLUDE: "install_temptool_patch.sh" src shell 
** sed
#+INCLUDE: "install_temptool_sed.sh" src shell 
** tar
#+INCLUDE: "install_temptool_tar.sh" src shell 
** xz
#+INCLUDE: "install_temptool_xz.sh" src shell 
** binutils
#+INCLUDE: "install_temptool_binutils.sh" src shell 
** gcc
#+INCLUDE: "install_temptool_gcc.sh" src shell 
<===============================================================================

* Entering Chroot and Building Additional Temporary Tools
** Changing Ownership
- to root
#+begin_src shell
chown --from lfs -R root:root $LFS/{usr,lib,var,etc,bin,sbin,tools}
case $(uname -m) in
    x86_64) 
        chown --from lfs -R root:root $LFS/lib64 
    ;;
esac
#+end_src


** Preparing Virtual Kernel File Systems
#+begin_src shell
mkdir -pv $LFS/{dev,proc,sys,run}
#+end_src


** Mounting and Populating /dev
#+begin_src shell
mount -v --bind /dev $LFS/dev
#+end_src

** Mounting Virtual Kernel File Systems
#+begin_src shell
mount -vt devpts devpts -o gid=5,mode=0620 $LFS/dev/pts
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys
mount -vt tmpfs tmpfs $LFS/run


if [ -h $LFS/dev/shm ]; then
    install -v -d -m 1777 $LFS$(realpath /dev/shm)
else
    mount -vt tmpfs -o nosuid,nodev tmpfs $LFS/dev/shm
fi
#+end_src


** Entering the Chroot Environment
#+begin_src shell
chroot "$LFS" /usr/bin/env -i \
HOME=/root \
TERM="$TERM" \
PS1='(lfs chroot) \u:\w\$ ' \
PATH=/usr/bin:/usr/sbin \
MAKEFLAGS="-j$(nproc)" \
TESTSUITEFLAGS="-j$(nproc)" \
/bin/bash --login
#+end_src


** Creating Directories
#+begin_src shell
mkdir -pv /{boot,home,mnt,opt,srv}

mkdir -pv /etc/{opt,sysconfig}
mkdir -pv /lib/firmware
mkdir -pv /media/{floppy,cdrom}
mkdir -pv /usr/{,local/}{include,src}
mkdir -pv /usr/lib/locale
mkdir -pv /usr/local/{bin,lib,sbin}
mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
mkdir -pv /usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -pv /usr/{,local/}share/man/man{1..8}
mkdir -pv /var/{cache,local,log,mail,opt,spool}
mkdir -pv /var/lib/{color,misc,locate}
ln -sfv /run /var/run
ln -sfv /run/lock /var/lock
install -dv -m 0750 /root
install -dv -m 1777 /tmp /var/tmp
#+end_src

** Creating Essential Files and Symlinks
#+begin_src shell
ln -sv /proc/self/mounts /etc/mtab
#+end_src

#+begin_src shell
cat > /etc/hosts << EOF
127.0.0.1 localhost $(hostname)
::1
 localhost
EOF
#+end_src

#+begin_src shell
cat > /etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/usr/bin/false
daemon:x:6:6:Daemon User:/dev/null:/usr/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/run/dbus:/usr/bin/false
uuidd:x:80:80:UUID Generation Daemon User:/dev/null:/usr/bin/false
nobody:x:65534:65534:Unprivileged User:/dev/null:/usr/bin/false
EOF
#+end_src

#+begin_src shell
cat > /etc/group << "EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
input:x:24:
mail:x:34:
kvm:x:61:
uuidd:x:80:
wheel:x:97:
users:x:999:
nogroup:x:65534:
EOF
#+end_src

#+begin_src shell
localedef -i C -f UTF-8 C.UTF-8
#+end_src

#+begin_src shell
echo "tester:x:101:101::/home/tester:/bin/bash" >> /etc/passwd
echo "tester:x:101:" >> /etc/group
install -o tester -d /home/tester
#+end_src

#+begin_src shell
exec /usr/bin/bash --login
#+end_src

#+begin_src shell
touch /var/log/{btmp,lastlog,faillog,wtmp}
chgrp -v utmp /var/log/lastlog
chmod -v 664 /var/log/lastlog
chmod -v 600 /var/log/btmp
#+end_src



** gettext
#+INCLUDE: "install_addnltool_gettext.sh" src shell 
#+begin_src shell
cd $LFS/sources
LFS_TARGET=gettext
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --disable-shared
make
cp -v gettext-tools/src/{msgfmt,msgmerge,xgettext} /usr/bin

#+end_src


** bison
#+INCLUDE: "install_addnltool_bison.sh" src shell 
#+begin_src shell
cd $LFS/sources
LFS_TARGET=bison
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--docdir=/usr/share/doc/bison-3.8.2

make
make install

#+end_src


** perl
#+INCLUDE: "install_addnltool_perl.sh" src shell 
#+begin_src shell
#+INCLUDE: "install_addnltool_perl.sh" src shell 
cd $LFS/sources
LFS_TARGET=perl
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sh Configure -des \
-D prefix=/usr \
-D vendorprefix=/usr \
-D useshrplib \
-D privlib=/usr/lib/perl5/5.40/core_perl \
-D archlib=/usr/lib/perl5/5.40/core_perl \
-D sitelib=/usr/lib/perl5/5.40/site_perl \
-D sitearch=/usr/lib/perl5/5.40/site_perl \
-D vendorlib=/usr/lib/perl5/5.40/vendor_perl \
-D vendorarch=/usr/lib/perl5/5.40/vendor_perl

make
make install

#+end_src


** python
#+INCLUDE: "install_addnltool_python.sh" src shell 
#+begin_src shell
#+INCLUDE: "install_addnltool_python.sh" src shell 
cd $LFS/sources
LFS_TARGET=python
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--enable-shared \
--without-ensurepip

make
make install

#+end_src



** Texinfo
#+INCLUDE: "install_addnltool_texinfo.sh" src shell 
#+begin_src shell
cd $LFS/sources
LFS_TARGET=texinfo
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make install

#+end_src



** util-linux
#+INCLUDE: "install_addnltool_util-linux.sh" src shell 
#+begin_src shell
cd $LFS/sources
LFS_TARGET=util-linux
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

mkdir -pv /var/lib/hwclock

./configure \
--libdir=/usr/lib \
--runstatedir=/run \
--disable-chfn-chsh \
--disable-login \
--disable-nologin \
--disable-su \
--disable-setpriv \
--disable-runuser \
--disable-pylibmount \
--disable-static \
--disable-liblastlog2 \
--without-python \
ADJTIME_PATH=/var/lib/hwclock/adjtime \
--docdir=/usr/share/doc/util-linux-2.40.2

make
make install

#+end_src


** Cleaning up and Saving the Temporary System
#+begin_src bash
rm -rf /usr/share/{info,man,doc}/*
find /usr/{lib,libexec} -name \*.la -delete
# rm -rf /tools 
#+end_src


** Backup
#+begin_src bash
exit

mountpoint -q $LFS/dev/shm && umount $LFS/dev/shm
umount $LFS/dev/pts
umount $LFS/{sys,proc,run,dev}

cd $LFS
tar -cJpf $HOME/lfs-temp-tools-12.2.tar.xz .
#+end_src


** Restore
#+begin_src bash
cd $LFS
rm -rf ./*
tar -xpf $HOME/lfs-temp-tools-12.2.tar.xz
#+end_src

#+begin_src bash
su - lfs
#+end_src



* Installing Basic System Software
** man-pages
#+INCLUDE: "install_final_man-pages.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=man-pages
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

rm -v man3/crypt*
make prefix=/usr install

#+end_src


** iana-etc
#+INCLUDE: "install_final_iana-etc.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=iana-etc
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

cp services protocols /etc
#+end_src


** glibc
#+INCLUDE: "install_final_glibc.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=glibc
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

patch -Np1 -i ../glibc-2.40-fhs-1.patch

mkdir build
cd build

echo "rootsbindir=/usr/sbin" > configparms
../configure \
--prefix=/usr \
--disable-werror \
--enable-kernel=4.19 \
--enable-stack-protector=strong \
--disable-nscd \
libc_cv_slibdir=/usr/lib

make
make check
touch /etc/ld.so.conf
sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile
make install
sed '/RTLDLIST=/s@/usr@@g' -i /usr/bin/ldd

localedef -i C -f UTF-8 C.UTF-8
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i el_GR -f ISO-8859-7 el_GR
localedef -i en_GB -f ISO-8859-1 en_GB
localedef -i en_GB -f UTF-8 en_GB.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_ES -f ISO-8859-15 es_ES@euro
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i is_IS -f ISO-8859-1 is_IS
localedef -i is_IS -f UTF-8 is_IS.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i it_IT -f ISO-8859-15 it_IT@euro
localedef -i it_IT -f UTF-8 it_IT.UTF-8
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i ja_JP -f SHIFT_JIS ja_JP.SJIS 2> /dev/null || true
localedef -i ja_JP -f UTF-8 ja_JP.UTF-8
localedef -i nl_NL@euro -f ISO-8859-15 nl_NL@euro
localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
localedef -i se_NO -f UTF-8 se_NO.UTF-8
localedef -i ta_IN -f UTF-8 ta_IN.UTF-8
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
localedef -i zh_CN -f GB18030 zh_CN.GB18030
localedef -i zh_HK -f BIG5-HKSCS zh_HK.BIG5-HKSCS
localedef -i zh_TW -f UTF-8 zh_TW.UTF-8

#+end_src


* Configuring glibc
** Adding nsswitch.conf
#+begin_src bash
cat > /etc/nsswitch.conf << "EOF"
# Begin /etc/nsswitch.conf
passwd: files
group: files
shadow: files
hosts: files dns
networks: files
protocols: files
services: files
ethers: files
rpc: files
# End /etc/nsswitch.conf
EOF
#+end_src

** Adding Time Zone Data
#+begin_src shell
tar -xf ../../tzdata2024a.tar.gz
ZONEINFO=/usr/share/zoneinfo
mkdir -pv $ZONEINFO/{posix,right}
for tz in etcetera southamerica northamerica europe africa antarctica asia australasia backward; do
    zic -L /dev/null -d $ZONEINFO ${tz}
    zic -L /dev/null -d $ZONEINFO/posix ${tz}
    zic -L leapseconds -d $ZONEINFO/right ${tz}
done
cp -v zone.tab zone1970.tab iso3166.tab $ZONEINFO
zic -d $ZONEINFO -p America/New_York
unset ZONEINFO
#tzselect
ln -sfv /usr/share/zoneinfo/<xxx> /etc/localtime
#+end_src

** Configuring the Dynamic Loader
#+begin_src bash
cat > /etc/ld.so.conf << "EOF"
# Begin /etc/ld.so.conf
/usr/local/lib
/opt/lib
EOF

cat >> /etc/ld.so.conf << "EOF"
# Add an include directory
include /etc/ld.so.conf.d/*.conf
EOF
mkdir -pv /etc/ld.so.conf.d
#+end_src


** zlib
#+INCLUDE: "install_final_zlib.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=zlib
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install
rm -fv /usr/lib/libz.a

#+end_src

** bzip
#+INCLUDE: "install_final_bzip2.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=bzip
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

patch -Np1 -i ../bzip2-1.0.8-install_final_docs-1.patch
sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile

make -f Makefile-libbz2_so
make clean

make
make PREFIX=/usr install
cp -av libbz2.so.* /usr/lib
ln -sv libbz2.so.1.0.8 /usr/lib/libbz2.so

cp -v bzip2-shared /usr/bin/bzip2
for i in /usr/bin/{bzcat,bunzip2}; do
    ln -sfv bzip2 $i
done

rm -fv /usr/lib/libbz2.a

#+end_src

** xz
#+INCLUDE: "install_final_xz.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=xz
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--docdir=/usr/share/doc/xz-5.6.2

make
make check
make install

#+end_src

** lz4
#+INCLUDE: "install_final_lz4.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=lz4
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

make BUILD_STATIC=no PREFIX=/usr
make -j1 check
make BUILD_STATIC=no PREFIX=/usr install

#+end_src


** zstd
#+INCLUDE: "install_final_zstd.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=zstd
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

make prefix=/usr
make check
make prefix=/usr install
rm -v /usr/lib/libzstd.a

#+end_src


** file
#+INCLUDE: "install_final_file.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=file
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install

#+end_src


** readline
#+INCLUDE: "install_final_readline.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=readline
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i '/MV.*old/d' Makefile.in
sed -i '/{OLDSUFF}/c:' support/shlib-install

sed -i 's/-Wl,-rpath,[^ ]*//' support/shobj-conf

./configure \
--prefix=/usr \
--disable-static \
--with-curses \
--docdir=/usr/share/doc/readline-8.2.13

make SHLIB_LIBS="-lncursesw"
make SHLIB_LIBS="-lncursesw" install
install -v -m644 doc/*.{ps,pdf,html,dvi} /usr/share/doc/readline-8.2.13

#+end_src


** m4
#+INCLUDE: "install_final_m4.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=m4
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install

#+end_src




** bc
#+INCLUDE: "install_final_bc.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=bc
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

CC=gcc ./configure --prefix=/usr -G -O3 -r
make
make test
make install

#+end_src



** flex
#+INCLUDE: "install_final_flex.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=flex
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--docdir=/usr/share/doc/flex-2.6.4 \
--disable-static

make
make check
make install

ln -sv flex /usr/bin/lex
ln -sv flex.1 /usr/share/man/man1/lex.1

#+end_src

** tcl
#+INCLUDE: "install_final_tcl.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=tcl*src
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

SRCDIR=$(pwd)
cd unix
./configure --prefix=/usr \
--mandir=/usr/share/man \
--disable-rpath

make
sed -e "s|$SRCDIR/unix|/usr/lib|" \
    -e "s|$SRCDIR|/usr/include|" \
    -i tclConfig.sh
sed -e "s|$SRCDIR/unix/pkgs/tdbc1.1.7|/usr/lib/tdbc1.1.7|" \
    -e "s|$SRCDIR/pkgs/tdbc1.1.7/generic|/usr/include|" \
    -e "s|$SRCDIR/pkgs/tdbc1.1.7/library|/usr/lib/tcl8.6|" \
    -e "s|$SRCDIR/pkgs/tdbc1.1.7|/usr/include|" \
    -i pkgs/tdbc1.1.7/tdbcConfig.sh
sed -e "s|$SRCDIR/unix/pkgs/itcl4.2.4|/usr/lib/itcl4.2.4|" \
    -e "s|$SRCDIR/pkgs/itcl4.2.4/generic|/usr/include|" \
    -e "s|$SRCDIR/pkgs/itcl4.2.4|/usr/include|" \
    -i pkgs/itcl4.2.4/itclConfig.sh
unset SRCDIR

make test
make isntall
chmod -v u+w /usr/libtcl8.6.so
make install-private-headers
ln -sfv tclsh8.6 /usr/bin/tclsh
mv /usr/share/man/man3/{Thread,Tcl_Thread}.3


# FIXME
# tar -xf ../tcl8.6.14-html.tar.gz --strip-components=1
# mkdir -v -p /usr/share/doc/tcl-8.6.14
# cp -v -r ./html/* /usr/share/doc/tcl-8.6.14

#+end_src

** expect
#+INCLUDE: "install_final_expect.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=expect
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

python3 -c 'from pty import spawn; spawn(["echo", "ok"])'
patch -Np1 -i ../expect-5.45.4-gcc14-1.patch
./configure \
--prefix=/usr \
--with-tcl=/usr/lib \
--enable-shared \
--disable-rpath \
--mandir=/usr/share/man \
--with-tclinclude=/usr/include

make
make test
make install
# FIXME
ln -svf expect5.45.4/libexpect5.45.4.so /usr/lib

#+end_src

** dejaGNU
#+INCLUDE: "install_final_dejagnu.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=dejagnu
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

mkdir build
cd build

../configure --prefix=/usr
makeinfo --html --no-split -o doc/dejagnu.html ../doc/dejagnu.texi
makeinfo --plaintext -o doc/dejagnu.txt ../doc/dejagnu.texi

make check
make install
# FIXME
install -v -dm755 /usr/share/doc/dejagnu-1.6.3
install -v -m644 doc/dejagnu.{html,txt} /usr/share/doc/dejagnu-1.6.3

cd ..
#+end_src

** pkgconf
#+INCLUDE: "install_final_pkgconf.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=pkgconf
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr \
--disable-static \
--docdir=/usr/share/doc/pkgconf-2.3.0


make
make install

ln -sv pkgconf /usr/bin/pkg-config
ln -sv pkgconf.1 /usr/share/man/man1/pkg-config.1

#+end_src

** binutils
#+INCLUDE: "install_final_binutils.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=binutils
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

mkdir build
cd build

../configure \
--prefix=/usr \
--sysconfdir=/etc \
--enable-gold \
--enable-ld=default \
--enable-plugins \
--enable-shared \
--disable-werror \
--enable-64-bit-bfd \
--enable-new-dtags \
--with-system-zlib \
--enable-default-hash-style=gnu

make tooldir=/usr

# FIXME: DO NOT SKIP 
make -k check
grep '^FAIL:' $(find -name '*.log')

make tooldir=/usr install
rm -fv /usr/lib/lib{bfd,ctf,ctf-nobfd,gprofng,opcodes,sframe}.a

cd ../../
#+end_src

** gmp
#+INCLUDE: "install_final_gmp.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=gmp
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--enable-cxx \
--disable-static \
--docdir=/usr/share/doc/gmp-6.3.0

make
make html

# FIXME: DO NOT SKIP 
make check 2>&1 | tee gmp-check-log
awk '/# PASS:/{total+=$3} ; END{print total}' gmp-check-log

make install
make install-html


#+end_src

** mpfr
#+INCLUDE: "install_final_mpfr.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=mpfr
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--enable-thread-safe \
--docdir=/usr/share/doc/mpfr-4.2.1

make
make html

# FIXME: DO NOT SKIP
make check

make install
make install-html

#+end_src

** mpc
#+INCLUDE: "install_final_mpc.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=mpc
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--docdir=/usr/share/doc/mpc-1.3.1

make
make html

make check

make install
make install-html

#+end_src

** attr
#+INCLUDE: "install_final_attr.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=attr
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--sysconfdir=/etc \
--docdir=/usr/share/doc/attr-2.5.2

make
make check
make install

#+end_src

** acl
#+INCLUDE: "install_final_acl.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=acl
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--docdir=/usr/share/doc/acl-2.3.2

make
make install

#+end_src

** libcap
#+INCLUDE: "install_final_libcap.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=libcap
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i '/install -m.*STA/d' libcap/Makefile
make prefix=/usr lib=lib

make test
make prefix=/usr lib=lib install

#+end_src

** libxcrypt
#+INCLUDE: "install_final_libxcrypt.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=libxcrypt
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--enable-hashes=strong,glibc \
--enable-obsolete-api=no \
--disable-static \
--disable-failure-tokens

make
make check
make install

#+end_src

** shadow
#+INCLUDE: "install_final_shadow.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=shadow
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i 's/groups$(EXEEXT) //' src/Makefile.in
find man -name Makefile.in -exec sed -i 's/groups\.1 / /' {} \;
find man -name Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
find man -name Makefile.in -exec sed -i 's/passwd\.5 / /' {} \;

touch /usr/bin/passwd
./configure \
--sysconfdir=/etc \
--disable-static \
--with-{b,yes}crypt \
--without-libbsd \
--with-group-name-max-length=32

make
make exec_prefix=/usr install
make -C man install-man

# configuring
pwconv
grpconv

mkdir -p /etc/default
useradd -D --gid 999

passwd root 

#+end_src


** gcc
#+INCLUDE: "install_final_gcc.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=gcc
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

case $(uname -m) in
    x86_64)
        sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
    ;;
esac

mkdir build
cd build

../configure \
--prefix=/usr \
LD=ld \
--enable-languages=c,c++ \
--enable-default-pie \
--enable-default-ssp \
--enable-host-pie \
--disable-multilib \
--disable-bootstrap \
--disable-fixincludes \
--with-system-zlib

make

# stack limit
ulimit -s -H unlimited

# remove/fix several known test failures
sed -e '/cpython/d' -i ../gcc/testsuite/gcc.dg/plugin/plugin.exp
sed -e 's/no-pic /&-no-pie /' -i ../gcc/testsuite/gcc.target/i386/pr113689-1.c
sed -e 's/300000/(1|300000)/' -i ../libgomp/testsuite/libgomp.c-c++-common/pr109062.c
sed -e 's/{ target nonpic } //' \
    -e '/GOTPCREL/d'
    -i ../gcc/testsuite/gcc.target/i386/fentryname3.c

chown -R tester .
su tester -c "PATH=$PATH make -k check"
../contrib/test_summary

make install 

# ownership to root user and group
chown -v -R root:root \
    /usr/lib/gcc/$(gcc -dumpmachine)/14.2.0/include{,-fixed}

# fhs historical reasons
ln -svr /usr/bin/cpp /usr/lib

#man page symlink
ln -sv gcc.1 /usr/share/man/man1/cc.1

# sanity checks FIXME
echo 'int main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'

# correct header files FIXME
grep -E -o '/usr/lib.*/S?crt[1in].*succeeded' dummy.log
# linker used with correct search paths FIXME
grep -B4 '^ /usr/include' dummy.log
# correct libc FIXME
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
# correct dinamic linker FIXME
grep found dummy.log

# rm -v dummy.c a.out dummy.log


mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

cd ../../
#+end_src

** ncurses
#+INCLUDE: "install_final_ncurses.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=ncurses
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--mandir=/usr/share/man \
--with-shared \
--without-debug \
--without-normal \
--with-cxx-shared \
--enable-pc-files \
--with-pkg-config-libdir=/usr/lib/pkgconfig

make

make DESTDIR=$PWD/dest install
install -vm755 dest/usr/lib/libncursesw.so.6.5 /usr/lib
rm -v dest/usr/lib/libncursesw.so.6.5
sed -e 's/^#if.*XOPEN.*$/#if 1/' \
    -i dest/usr/include/curses.h
cp -av dest/* /

for lib in ncurses form panel menu ; do
    ln -sfv lib${lib}w.so /usr/lib/lib${lib}.so
    ln -sfv ${lib}w.pc /usr/lib/pkgconfig/${lib}.pc
done

ln -sfv libncursesw.so /usr/lib/libcurses.so
cp -v -R doc -T /usr/share/doc/ncurses-6.5

#+end_src

** sed
#+INCLUDE: "install_final_sed.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=sed
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

cp -v -R doc -T /usr/share/doc/ncurses-6.5
make
make html

chown -R tester .
su tester -c "PATH=$PATH make check"

make install
install -d -m755 /usr/share/doc/sed-4.9
install -m644 doc/sed.html /usr/share/doc/sed-4.9

#+end_src

** psmisc
#+INCLUDE: "install_final_psmisc.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=psmisc
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install

#+end_src

** gettext
#+INCLUDE: "install_final_gettext.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=gettext
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--docdir=/usr/share/doc/gettext-0.22.5

make
make check
make install
chmod -v 0755 /usr/preloadable_libntl.so

#+end_src

** bison
#+INCLUDE: "install_final_bison.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=bison
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr --docdir=/usr/share/doc/bison-3.8.2
make
make check
make install

#+end_src

** grep
#+INCLUDE: "install_final_grep.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=grep
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i "s/echo/#echo/" src/egrep.sh
./configure --prefix=/usr
make
make check
make install

#+end_src

** bash
#+INCLUDE: "install_final_bash.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=bash
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--without-bash-malloc \
--with-installed-readline \
bash_cv_strtold_broken=no \
--docdir=/usr/share/doc/bash-5.2.32

make
chown -R tester .

su -s /usr/bin/expect tester << "EOF"
set timeout -1
spawn make tests
expect eof
lassign [wait] _ _ _ value
exit $value
EOF

make install

exec /usr/bin/bash --login

#+end_src

** libtool
#+INCLUDE: "install_final_libtool.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=libtool
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make -k check
make install
rm -fv /usr/lib/libltdl.a

#+end_src

** gdbm
#+INCLUDE: "install_final_gdbm.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=gdbm
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--enable-libgdbm-compat

make
make check
make install

#+end_src



** gperf
#+INCLUDE: "install_final_gperf.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=gperf
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr --docdir=/usr/share/doc/gperf-3.1
make
make -j1 check
make install

#+end_src



** expat
#+INCLUDE: "install_final_expat.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=expat
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--docdir=/usr/share/doc/expat-2.6.2

make
make check
make install

#FIXME
install -v -m644 doc/*.{html,css} /usr/share/doc/expat-2.6.2

#+end_src



** inetutils
#+INCLUDE: "install_final_inetutils.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=inetutils
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i 's/def HAVE_TERMCAP_TGETENT/ 1/' telnet/telnet.c

./configure \
--prefix=/usr \
--bindir=/usr/bin \
--localstatedir=/var \
--disable-logger \
--disable-whois \
--disable-rcp \
--disable-rexec \
--disable-rlogin \
--disable-rsh \
--disable-servers

make
make check
make install
mk -v /usr/{,s}bin/ifconfig

#+end_src



** less
#+INCLUDE: "install_final_less.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=less
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr --sysconfdir=/etc
make 
make check
make install

#+end_src



** perl
#+INCLUDE: "install_final_perl.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=perl
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

export BUILD_ZLIB=False
export BUILD_BZIP2=0

sh Configure -des \
-D prefix=/usr \
-D vendorprefix=/usr \
-D privlib=/usr/lib/perl5/5.40/core_perl \
-D archlib=/usr/lib/perl5/5.40/core_perl \
-D sitelib=/usr/lib/perl5/5.40/site_perl \
-D sitearch=/usr/lib/perl5/5.40/site_perl \
-D vendorlib=/usr/lib/perl5/5.40/vendor_perl \
-D vendorarch=/usr/lib/perl5/5.40/vendor_perl \
-D man1dir=/usr/share/man/man1 \
-D man3dir=/usr/share/man/man3 \
-D pager="/usr/bin/less -isR" \
-D useshrplib \
-D usethreads

make
TEST_JOBS=$(nproc) make test_harness

make install
unset BUILD_ZLIB BUILD_BZIP2

#+end_src



** xml::parser
#+INCLUDE: "install_final_xml-parser.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=XML-Parser
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

perl Makefile.PL
make
make test
make install

#+end_src



** intltool
#+INCLUDE: "install_final_intltool.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=intltool
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i 's:\\\${:\\\$\\{:' intltool-update.in
./configure --prefix=/usr
make
make check
make install
install -v -Dm644 doc/I18N-HOWTO /usr/share/doc/intltool-0.51.0/I18N-HOWTO

#+end_src



** autoconf
#+INCLUDE: "install_final_autoconf.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=autoconf
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install

#+end_src



** automake
#+INCLUDE: "install_final_automake.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=automake
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

#FIXME
./configure --prefix=/usr --docdir=/usr/share/doc/automake-1.17
make
make -j$(($(nproc)>4?$(nproc):4)) check
make install

#+end_src



** openssl
#+INCLUDE: "install_final_openssl.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=openssl
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./config \
--prefix=/usr \
--openssldir=/etc/ssl \
--libdir=lib \
shared \
zlib-dynamic

make
HARNESS_JOBS=$(nproc) make test

sed -i '/INSTALL_FINAL_LIBS/s/libcrypto.a libssl.a//' Makefile
make MANSUFFIX=ssl install

mv -v /usr/share/doc/openssl /usr/share/doc/openssl-3.3.1

#FIXME
cp -vfr doc/* /usr/share/doc/openssl-3.3.1

#+end_src



** kmod
#+INCLUDE: "install_final_kmod.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=kmod
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--sysconfdir=/etc \
--with-openssl \
--with-xz \
--with-zstd \
--with-zlib \
--disable-manpages

make
make install
for target in depmod insmod modinfo modprobe rmmod; do
    ln -sfv ../bin/kmod /usr/sbin/$target
    rm -fv /usr/bin/$target
done

#+end_src



** libelf 
#+INCLUDE: "install_final_libelf.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=elfutils
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

cd libelf/

./configure --prefix=/usr \
--disable-debuginfod \
--enable-libdebuginfod=dummy

make
make check

make -C libelf install
install -vm644 config/libelf.pc /usr/lib/pkgconfig
rm /usr/lib/libelf.a

cd ../../
#+end_src



** libffi 
#+INCLUDE: "install_final_libffi.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=libffi
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--disable-static \
--with-gcc-arch=native

make
make check
make install

#+end_src



** python
#+INCLUDE: "install_final_python.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=python
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--enable-shared \
--with-system-expat \
--enable-optimizations

make
make test TESTOPTS="--timeout 120"
make install

# FIXME
install -v -dm755 /usr/share/doc/python-3.12.5/html
tar --no-same-owner \
    -xvf ../python-3.12.5-docs-html.tar.bz2
cp -R --no-preserve=mode python-3.12.5-docs-html/* \
    /usr/share/doc/python-3.12.5/html

#+end_src



** flit_core
#+INCLUDE: "install_final_flit-core.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=flit_core
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD
pip3 install --no-index --find-links=dist wheel

#+end_src



** setuptools
#+INCLUDE: "install_final_setuptools.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=setuptools
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD
pip3 install --no-index --find-links dist setuptools

#+end_src


** ninja
#+INCLUDE: "install_final_ninja.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=ninja
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

export NINJAJOBS=4

sed -i '/int Guess/a \
    int j = 0;\
    char* jobs = getenv( "NINJAJOBS" );\
    if ( jobs != NULL ) j = atoi( jobs );\
    if ( j > 0 ) return j;\
' src/ninja.cc

python3 configure.py --bootstrap

install -vm755 ninja /usr/bin/
install -vDm644 misc/bash-completion /usr/share/bash-completion/completions/ninja
install -vDm644 misc/zsh-completion /usr/share/zsh/site-functions/_ninja

#+end_src



** meson
#+INCLUDE: "install_final_meson.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=meson
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD

pip3 install --no-index --find-links dist meson
install -vDm644 data/shell-completions/bash/meson /usr/share/bash-completion/completions/meson
install -vDm644 data/shell-completions/zsh/_meson /usr/share/zsh/site-functions/_meson

#+end_src



** coreutils
#+INCLUDE: "install_final_coreutils.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=coreutils
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

patch -Np1 -i ../coreutils-9.5-i18n-2.patch

autoreconf -fiv
FORCE_UNSAFE_CONFIGURE=1 ./configure \
--prefix=/usr \
--enable-no-install-program=kill,uptime

make
make NON_ROOT_USERNAME=tester check-root
groupadd -g 102 dummy -U tester
chown -R tester .

su tester -c "PATH make -k RUN_EXPENSIVE_TESTS=yes check" \
    < /dev/null

groupdel dummy
make install

mv -v /usr/bin/chroot /usr/sbin
mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
sed -i 's/"1"/"8"/' /usr/share/man/man8/chroot.8

#+end_src



** check
#+INCLUDE: "install_final_check.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=check
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

../configure --prefix=/usr --disable-static
make
make check
make docdir=/usr/share/doc/check-0.15.2 install

#+end_src


** diffutils
#+INCLUDE: "install_final_diffutils.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=diffutils
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install

#+end_src


** gawk
#+INCLUDE: "install_final_gawk.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=gawk
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i 's/extras//' Makefile.in
./configure --prefix=/usr
make

chown -R tester .
su tester -c "PATH=$PATH make check"

rm -f /usr/bin/gawk-5.3.0
make install

ln -sv gawk.1 /usr/share/man/man1/awk.1

#FIXME
mkdir -pv /usr/share/doc/gawk-5.3.0
cp -v doc/{awkforai.txt,*.{eps,pdf,jpg}} /usr/share/doc/gawk-5.3.0

#+end_src


** findutils
#+INCLUDE: "install_final_findutils.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=findutils
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr --localstatedir=/var/lib/locate
make

chown -R tester .
su tester -c "PATH=$PATH make check"

make install

#+end_src


** groff
#+INCLUDE: "install_final_groff.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=groff
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

PAGE=<paper_size> ./configure --prefix=/usr
make
make check
make install

#+end_src


** grub
#+INCLUDE: "install_final_grub.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=grub
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

unset {C,CPP,CXX,LD}FLAGS

echo depends bli part_gpt > grub-core/extra_deps.lst

./configure \
--prefix=/usr \
--sysconfdir=/etc \
--disable-efiemu \
--disable-werror

make
make install
mv -v /etc/bash_completion.d/grub /usr/share/bash-completion/completions

#+end_src


** gzip 
#+INCLUDE: "install_final_gzip.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=gzip
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install

#+end_src


** iproute
#+INCLUDE: "install_final_iproute.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=iproute
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i /ARPD/d Makefile
rm -fv man/man8/arpd.8

make NETNS_RUN_DIR=/run/netns
make SBINDIR=/usr/sbin install

#FIXME
mkdir -pv /usr/share/doc/iproute2-6.10.0
cp -v COPYING README* /usr/share/doc/iproute2-6.10.0

#+end_src


** kbd
#+INCLUDE: "install_final_kbd.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=kbd
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

patch -Np1 -i ../kbd-2.6.4-backspace-1.patch
sed -i '/RESIZECONS_PROGS=/s/yes/no/' configure
sed -i 's/resizecons.8 //' docs/man/man8/Makefile.in
./configure --prefix=/usr --disable-vlock
make
make check
make install

#FIXME
cp -R -v docs/doc -T /usr/share/doc/kbd-2.6.4

#+end_src


** libpipeline
#+INCLUDE: "install_final_libpipeline.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=libpipeline
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

cp -R -v docs/doc -T /usr/share/doc/kbd-2.6.4
make
make check
make install

#+end_src


** make
#+INCLUDE: "install_final_make.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=make
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
chown -R tester .
su tester -c "PATH=$PATH make check"
make install

#+end_src


** patch
#+INCLUDE: "install_final_patch.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=patch
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install

#+end_src


** tar 
#+INCLUDE: "install_final_tar.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=tar
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

FORCE_UNSAFE_CONFIGURE=1 \
    ./configure --prefix=/usr
make
make check

make install
make -C doc install-html docdir=/usr/share/doc/tar-1.35

#+end_src


** texinfo
#+INCLUDE: "install_final_texinfo.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=texinfo
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr
make
make check
make install
make TEXMF=/usr/share/texmf install-tex

pushd /usr/share/info
    rm -v dir
    for f in *
        do install-info $f dir 2>/dev/null
    done
popd

#+end_src


** vim
#+INCLUDE: "install_final_vim.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=vim
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> src/feature.h
./configure --prefix=/usr
make 
chown -R tester .
# FIXME
su tester -c "TERM=xterm-256color LANG=en_UTS-8 make -j1 test" \
    &> vim-test.log

make install
ln -sv vim /usr/bin/vi
for L in /usr/share/man/{,*/}man/vim.1; do
    ln -sv vim.1 $(dirname $L)/vi.1
done

ln -sv ../vim/vim91/doc /usr/share/doc/vim-9.1.0660

# Configuring Vim
cat > /etc/vimrc << "EOF"
" Begin /etc/vimrc
" Ensure defaults are set before customizing settings, not after
source $VIMRUNTIME/defaults.vim
let skip_defaults_vim=1
set nocompatible
set backspace=2
set mouse=
syntax on
if (&term == "xterm") || (&term == "putty")
set background=dark
endif
" End /etc/vimrc
EOF

cd ..

#set spelllang=en,ru
#set spell

#+end_src


** MarkupSafe
#+INCLUDE: "install_final_markupsafe.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=MarkupSafe
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD
pip3 install --no-index --no-user --find-links dist Markupsafe

#+end_src


** jinja
#+INCLUDE: "install_final_jinja2.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=jinja
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD
pip3 install --no-index --no-user --find-links dist Jinja2

#+end_src


** udev
#+INCLUDE: "install_final_udev.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=systemd
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

sed -i -e 's/GROUP="render"/GROUP="video"/' \
    -e 's/GROUP="sgx", //' rules.d/50-udev-default.rules.in

sed '/systemd-sysctl/s/^/#/' -i rules.d/99-systemd.rules.in
sed '/NETWORK_DIRS/s/systemd/udev/' -i src/basic/path-lookup.h

mkdir build
cd build

meson setup .. \
--prefix=/usr \
--buildtype=release \
-D mode=release \
-D dev-kvm-mode=0660 \
-D link-udev-shared=false \
-D logind=false \
-D vconsole=false

export udev_helpers=$(grep "'name' :" ../src/udev/meson.build | \
                      awk '{print $3}' | tr -d ",'" | grep -v 'udevadm')

ninja udevadm systemd-hwdb \
$(ninja -n | grep -Eo '(src/(lib)?udev|rules.d|hwdb.d)/[^ ]*') \
$(realpath libudev.so --relative-to .) \
$udev_helpers

install -vm755 -d {/usr/lib,/etc}/udev/{hwdb.d,rules.d,network}
install -vm755 -d /usr/{lib,share}/pkgconfig
install -vm755 udevadm /usr/bin/
install -vm755 systemd-hwdb /usr/bin/udev-hwdb
ln -svfn ../bin/udevadm /usr/sbin/udevd
cp -av libudev.so{,*[0-9]} /usr/lib/
install -vm644 ../src/libudev/libudev.h /usr/include/
install -vm644 src/libudev/*.pc /usr/lib/pkgconfig/
install -vm644 src/udev/*.pc /usr/share/pkgconfig/
install -vm644 ../src/udev/udev.conf /etc/udev/
install -vm644 rules.d/* ../rules.d/README /usr/lib/udev/rules.d/
install -vm644 $(find ../rules.d/*.rules \
                      -not -name '*power-switch*') /usr/lib/udev/rules.d/
install -vm644 hwdb.d/* ../hwdb.d/{*.hwdb,README} /usr/lib/udev/hwdb.d/
install -vm755 $udev_helpers /usr/lib/udev
install -vm644 ../network/99-default.link /usr/lib/udev/network

tar -xvf ../../udev-lfs-20230818.tar.xz
make -f udev-lfs-20230818/Makefile.lfs install

#FIXME no man pages

unset udev_helpers

udev-hwdb update

cd ../../
#+end_src


** procps-ng
#+INCLUDE: "install_final_procps-ng.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=procps-ng
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure --prefix=/usr \
--docdir=/usr/share/doc/procps-ng-4.0.4 \
--disable-static \
--disable-kill

make
chown -R tester .
su tester -c "PATH=$PATH make check"
make install

#+end_src


** util-linux
#+INCLUDE: "install_final_util-linux.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=util-linux
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--bindir=/usr/bin \
--libdir=/usr/lib \
--runstatedir=/run \
--sbindir=/usr/sbin \
--disable-chfn-chsh \
--disable-login \
--disable-nologin \
--disable-su \
--disable-setpriv \
--disable-runuser \
--disable-pylibmount \
--disable-liblastlog2 \
--disable-static \
--without-python \
--without-systemd \
--without-systemdsystemunitdir\
ADJTIME_PATH=/var/lib/hwclock/adjtime \
--docdir=/usr/share/doc/util-linux-2.40.2

make

touch /etc/fstab
chown -R tester .
su tester -c "make -k check"

make install

#+end_src


** e2fsprogs
#+INCLUDE: "install_final_e2fsprogs.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=e2fsprogs
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

mkdir build
cd build

../configure \
--prefix=/usr \
--sysconfdir=/etc \
--enable-elf-shlibs \
--disable-libblkid \
--disable-libuuid \
--disable-uuidd \
--disable-fsck

make
make check
make install

rm -fv /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a

gunzip -v /usr/share/info/libext2fs.info.gz
install-info --dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info

#FIXME docs
makeinfo -o doc/com_err.info ../lib/et/com_err.texinfo
install -v -m644 doc/com_err.info /usr/share/info
install-info --dir-file=/usr/share/info/dir /usr/share/info/com_err.info

# configuring
sed 's/metadata_csum_seed,//' -i /etc/mke2fs.conf

#+end_src


** sysklogd
#+INCLUDE: "install_final_sysklogd.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=sysklogd
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

./configure \
--prefix=/usr \
--sysconfdir=/etc \
--runstatedir=/run \
--without-logger

make
make install

#configuring
cat > /etc/syslog.conf << "EOF"
# Begin /etc/syslog.conf
auth,authpriv.* -/var/log/auth.log
*.*;auth,authpriv.none -/var/log/sys.log
daemon.* -/var/log/daemon.log
kern.* -/var/log/kern.log
mail.* -/var/log/mail.log
user.* -/var/log/user.log
*.emerg *
# Do not open any internet ports.
secure_mode 2
# End /etc/syslog.conf
EOF

#+end_src




** sysvinit
#+INCLUDE: "install_final_sysvinit.sh" src shell 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=sysvinit
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

patch -Np1 -i ../sysvinit-3.10-consolidated-1.patch
make
make install


#+end_src

** stripping skiped FIXME


* System Configuration
** lfs-bootscripts 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=lfs-bootscripts
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

make install

#+end_src


** Creating Custom Udev Rules
#+begin_src bash
bash /usr/lib/udev/init-net-rules.sh
cat /etc/udev/rules.d/70-persistent-net.rules

#sed -e '/^AlternativeNamesPolicy/s/=.*$/=/' \
#/usr/lib/udev/network/99-default.link \
#> /etc/udev/network/99-default.link
#+end_src


** CD_ROM Symlinks
#+begin_src bash
udevadm test /sys/block/hdd

#sed -e 's/"write_cd_rules"/"write_cd_rules mode"/' \
#    -i /etc/udev/rules.d/83-cdrom-symlinks.rules
#+end_src

** Duplicate devices


* Network Configuration
** Creating Network Interaface configuration files
#+begin_src bash
cd /etc/sysconfig/
cat > ifconfig.eth0 << "EOF"
ONBOOT=yes
IFACE=eth0
SERVICE=ipv4-static
IP=192.168.1.2
GATEWAY=192.168.1.1
PREFIX=24
BROADCAST=192.168.1.255
EOF
#+end_src

** Creating the /etc/resolv.conf
#+begin_src bash
cat > /etc/resolv.conf << "EOF"
# Begin /etc/resolv.conf
domain <Your Domain Name>
nameserver <IP address of your primary nameserver>
nameserver <IP address of your secondary nameserver>
# End /etc/resolv.conf
EOF
#+end_src

** configuring the system hostname
#+begin_src bash
echo "<lfs>" > /etc/hostname
#+end_src


** Customizing the /etc/hosts
#+begin_src bash
cat > /etc/hosts << "EOF"
# Begin /etc/hosts
127.0.0.1 localhost.localdomain localhost
127.0.1.1 <FQDN> <HOSTNAME>
<192.168.1.1> <FQDN> <HOSTNAME> [alias1] [alias2 ...]
::1
 localhost ip6-localhost ip6-loopback
ff02::1
 ip6-allnodes
ff02::2
 ip6-allrouters
# End /etc/hosts
EOF
#+end_src



* System V Bootscrpit Usage and Configuration
** Configuring SysVinit
#+begin_src bash
cat > /etc/inittab << "EOF"
# Begin /etc/inittab
id:3:initdefault:
si::sysinit:/etc/rc.d/init.d/rc S
l0:0:wait:/etc/rc.d/init.d/rc 0
l1:S1:wait:/etc/rc.d/init.d/rc 1
l2:2:wait:/etc/rc.d/init.d/rc 2
l3:3:wait:/etc/rc.d/init.d/rc 3
l4:4:wait:/etc/rc.d/init.d/rc 4
l5:5:wait:/etc/rc.d/init.d/rc 5
l6:6:wait:/etc/rc.d/init.d/rc 6
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now
su:S06:once:/sbin/sulogin
s1:1:respawn:/sbin/sulogin
1:2345:respawn:/sbin/agetty --noclear tty1 9600
2:2345:respawn:/sbin/agetty tty2 9600
3:2345:respawn:/sbin/agetty tty3 9600
4:2345:respawn:/sbin/agetty tty4 9600
5:2345:respawn:/sbin/agetty tty5 9600
6:2345:respawn:/sbin/agetty tty6 9600
# End /etc/inittab
EOF
#+end_src


** Configuring the System Clock
#+begin_src bash
cat > /etc/sysconfig/clock << "EOF"
# Begin /etc/sysconfig/clock
UTC=1
# Set this to any options you might need to give to hwclock,
# such as machine hardware clock type for Alphas.
CLOCKPARAMS=
# End /etc/sysconfig/clock
EOF
#+end_src


** Linux Console
#+begin_src bash
cat > /etc/sysconfig/console << "EOF"
# Begin /etc/sysconfig/console
UNICODE="1"
FONT="Lat2-Terminus16"
# End /etc/sysconfig/console
EOF
#+end_src


** rc.site 
#+begin_src bash
# rc.site
# Optional parameters for boot scripts.
# Distro Information
# These values, if specified here, override the defaults
#DISTRO="Linux From Scratch" # The distro name
#DISTRO_CONTACT="lfs-dev@lists.linuxfromscratch.org" # Bug report address
#DISTRO_MINI="LFS" # Short name used in filenames for distro config
# Define custom colors used in messages printed to the screen
# Please consult `man console_codes` for more information
# under the "ECMA-48 Set Graphics Rendition" section
#
254
Linux From Scratch - Version 12.2
# Warning: when switching from a 8bit to a 9bit font,
# the linux console will reinterpret the bold (1;) to
# the top 256 glyphs of the 9bit font. This does
# not affect framebuffer consoles
# These values, if specified here, override the defaults
#BRACKET="\\033[1;34m" # Blue
#FAILURE="\\033[1;31m" # Red
#INFO="\\033[1;36m"
 # Cyan
#NORMAL="\\033[0;39m" # Grey
#SUCCESS="\\033[1;32m" # Green
#WARNING="\\033[1;33m" # Yellow
# Use a colored prefix
# These values, if specified here, override the defaults
#BMPREFIX="
 "
#SUCCESS_PREFIX="${SUCCESS} * ${NORMAL} "
#FAILURE_PREFIX="${FAILURE}*****${NORMAL} "
#WARNING_PREFIX="${WARNING} *** ${NORMAL} "
# Manually set the right edge of message output (characters)
# Useful when resetting console font during boot to override
# automatic screen width detection
#COLUMNS=120
# Interactive startup
#IPROMPT="yes" # Whether to display the interactive boot prompt
#itime="3"
 # The amount of time (in seconds) to display the prompt
# The total length of the distro welcome string, without escape codes
#wlen=$(echo "Welcome to ${DISTRO}" | wc -c )
#welcome_message="Welcome to ${INFO}${DISTRO}${NORMAL}"
# The total length of the interactive string, without escape codes
#ilen=$(echo "Press 'I' to enter interactive startup" | wc -c )
#i_message="Press '${FAILURE}I${NORMAL}' to enter interactive startup"
# Set scripts to skip the file system check on reboot
#FASTBOOT=yes
# Skip reading from the console
#HEADLESS=yes
# Write out fsck progress if yes
#VERBOSE_FSCK=no
# Speed up boot without waiting for settle in udev
#OMIT_UDEV_SETTLE=y
# Speed up boot without waiting for settle in udev_retry
#OMIT_UDEV_RETRY_SETTLE=yes
# Skip cleaning /tmp if yes
#SKIPTMPCLEAN=no
# For setclock
#UTC=1
#CLOCKPARAMS=
# For consolelog (Note that the default, 7=debug, is noisy)
#LOGLEVEL=7
# For network
255
#HOSTNAME=mylfs
# Delay between TERM and KILL signals at shutdown
#KILLDELAY=3
# Optional sysklogd parameters
#SYSKLOGD_PARMS="-m 0"
# Console parameters
#UNICODE=1
#KEYMAP="de-latin1"
#KEYMAP_CORRECTIONS="euro2"
#FONT="lat0-16 -m 8859-15"
#LEGACY_CHARSET=
#+end_src

** System locale
#+begin_src bash
LFS_LOCALE_NAME=en_US.utf8
LC_ALL=$LFS_LOCALE_NAME locale language
LC_ALL=$LFS_LOCALE_NAME locale charmap
LC_ALL=$LFS_LOCALE_NAME locale int_curr_symbol
LC_ALL=$LFS_LOCALE_NAME locale int_prefix

cat > /etc/profile << "EOF"
# Begin /etc/profile
for i in $(locale); do
unset ${i%=*}
done
if [[ "$TERM" = linux ]]; then
export LANG=C.UTF-8
else
export LANG=<ll>_<CC>.<charmap><@modifiers>
fi
# End /etc/profile
EOF
#+end_src


** /etc/inputrc
#+begin_src bash
cat > /etc/inputrc << "EOF"
# Begin /etc/inputrc
# Modified by Chris Lynn <roryo@roryo.dynup.net>
# Allow the command prompt to wrap to the next line
set horizontal-scroll-mode Off
# Enable 8-bit input
set meta-flag On
set input-meta On
# Turns off 8th bit stripping
set convert-meta Off
# Keep the 8th bit for display
set output-meta On
# none, visible or audible
set bell-style none
# All of the following map the escape sequence of the value
# contained in the 1st argument to the readline specific functions
"\eOd": backward-word
"\eOc": forward-word
# for linux console
"\e[1~": beginning-of-line
"\e[4~": end-of-line
"\e[5~": beginning-of-history
"\e[6~": end-of-history
"\e[3~": delete-char
"\e[2~": quoted-insert
# for xterm
"\eOH": beginning-of-line
"\eOF": end-of-line
# for Konsole
"\e[H": beginning-of-line
"\e[F": end-of-line
# End /etc/inputrc
EOF
#+end_src


** /etc/shells
#+begin_src shell
cat > /etc/shells << "EOF"
# Begin /etc/shells
/bin/sh
/bin/bash
# End /etc/shells
EOF
#+end_src


* Making the LFS System Bootable
** Creating the /etc/fstab file
- FIXME boot
#+begin_src bash
cat > /etc/fstab << "EOF"
# Begin /etc/fstab
# file system   mount-point     type        options               dump    fsck order
/dev/<xxx>      /               <fff>       defaults              1       1
/dev/<yyy>      swap            swap        pri=1                 0       0
proc            /proc           proc        nosuid,noexec,nodev   0       0
sysfs           /sys            sysfs       nosuid,noexec,nodev   0       0
devpts          /dev/pts        devpts      gid=5,mode=620        0       0
tmpfs           /run            tmpfs       defaults              0       0
devtmpfs        /dev            devtmpfs    mode=0755,nosuid      0       0
tmpfs           /dev/shm        tmpfs       nosuid,nodev          0       0
cgroup2         /sys/fs/cgroup  cgroup2     nosuid,noexec,nodev   0       0
# End /etc/fstab
EOF
#+end_src


** linux 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=linux
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

make mrproper
make menuconfig

make
make modules_install

mount /boot

cp -iv arch/x86/boot/bzImage /boot/vmlinuz-6.10.5-lfs-12.2
cp -iv System.map /boot/System.map-6.10.5
cp -iv .config /boot/config-6.10.5
cp -r Documentation -T /usr/share/doc/linux-6.10.5

#+end_src


** Configuring Linux Module load order
- /etc/modprobe.d/usb.conf
#+begin_src bash
install -v -m755 -d /etc/modprobe.d
cat > /etc/modprobe.d/usb.conf << "EOF"
# Begin /etc/modprobe.d/usb.conf
install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true
# End /etc/modprobe.d/usb.conf
EOF
#+end_src


** GRUB
TODO:
- mount boot(/dev/sdaX) as smth but not boot/
- move /boot/grub to smth
- move vmlinuz-linux to smth
- remount smth as boot/

#+begin_src bash
grub-install /dev/sdb --target i386-pc
#+end_src

#+begin_src bash
cat > /boot/grub/grub.cfg << "EOF"
# Begin /boot/grub/grub.cfg
set default=0
set timeout=5

insmod part_gpt
insmod ext2
set root=(hd0,2)

menuentry "GNU/Linux, Linux 6.10.5-lfs-12.2" {
    linux /boot/vmlinuz-6.10.5-lfs-12.2 root=/dev/sda2 ro
}
EOF
#+end_src












* USEFUL
#+begin_src bash
ip link
ls /sys/class/net
 
tzselect
gcc -dumpmachine
readelf -l <name of binary> | grep interpreter
#+end_src

** 
#+begin_src bash
cd $LFS/sources
LFS_TARGET=
tar -xf $LFS_TARGET*tar*
cd $LFS_TARGET*/

#+end_src


